#!/bin/sh

#================================================================
#   一键添加SSH公钥并禁止密码登录脚本 (终极兼容版)
#
#   兼容性:
#   - 完全兼容 sh 和 bash
#   - 自动检测并使用 curl 或 wget
#   - 适用于所有主流 Linux 发行版
#
#================================================================

# 定义颜色 (在不支持-e的sh中可能会显示为纯文本，但不影响功能)
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

# 使用printf以获得最佳兼容性
log_info() {
    printf "[*] %s\n" "$1"
}
log_success() {
    printf "${GREEN}[+] %s${NC}\n" "$1"
}
log_error() {
    printf "${RED}[-] %s${NC}\n" "$1"
}
log_warning() {
    printf "${YELLOW}[!] %s${NC}\n" "$1"
}

# 脚本开始
log_info "脚本开始执行..."
set -e # 任何命令失败则立即退出

# 公钥URL
PUB_KEY_URL="https://cdn.jsdelivr.net/gh/Jianfei-DinG/bash/script/id_rsa.pub.txt"

# 1. 获取公钥
log_info "正在从 $PUB_KEY_URL 获取公钥..."
if command -v curl >/dev/null 2>&1; then
    PUB_KEY=$(curl -sSL "$PUB_KEY_URL")
else
    PUB_KEY=$(wget -qO- "$PUB_KEY_URL")
fi

if [ -z "$PUB_KEY" ]; then
    log_error "无法获取公钥。请确保系统已安装 curl 或 wget，并且网络连接正常。"
    exit 1
fi
log_success "公钥获取成功。"

# 2. 确定用户和家目录
if [ "$(id -u)" -eq 0 ]; then
    USER_HOME="/root"
    log_info "检测到当前为 root 用户。"
else
    USER_HOME="$HOME"
    log_info "检测到当前为普通用户: $(whoami)。"
fi

SSH_DIR="$USER_HOME/.ssh"
AUTHORIZED_KEYS_FILE="$SSH_DIR/authorized_keys"

# 3. 创建目录和文件，并设置权限
log_info "正在配置SSH目录和文件权限..."
mkdir -p "$SSH_DIR"
log_info "确保目录 $SSH_DIR 存在。"
touch "$AUTHORIZED_KEYS_FILE"
log_info "确保文件 $AUTHORIZED_KEYS_FILE 存在。"

chmod 700 "$SSH_DIR"
log_info "设置目录 $SSH_DIR 权限为 700。"
chmod 600 "$AUTHORIZED_KEYS_FILE"
log_info "设置文件 $AUTHORIZED_KEYS_FILE 权限为 600。"
log_success "目录和文件权限设置完成。"

# 4. 添加公钥 (使用 sh/bash 完全兼容的 grep)
log_info "正在检查并添加公钥..."
# 使用-F将key作为固定字符串匹配，-q静默模式，这是最稳健的兼容性写法
if ! grep -Fq "$PUB_KEY" "$AUTHORIZED_KEYS_FILE"; then
    echo "$PUB_KEY" >> "$AUTHORIZED_KEYS_FILE"
    log_success "公钥已成功添加到 $AUTHORIZED_KEYS_FILE 文件中。"
else
    log_warning "公钥已存在于 $AUTHORIZED_KEYS_FILE 文件中，无需重复添加。"
fi

# 5. 修改SSH配置
# ... 后续修改sshd_config和重启服务的部分已经是兼容的，无需改动 ...
SUDO_CMD=""
if [ "$(id -u)" -ne 0 ]; then
    if command -v sudo >/dev/null 2>&1; then
        SUDO_CMD="sudo"
        log_info "检测到sudo命令，将使用sudo执行特权操作。"
    else
        log_warning "当前用户不是root，且未找到sudo命令。无法自动修改SSH配置。"
        exit 0
    fi
fi

SSHD_CONFIG_FILE="/etc/ssh/sshd_config"
log_info "正在修改SSH配置文件: $SSHD_CONFIG_FILE ..."
$SUDO_CMD sed -i 's/^#*PasswordAuthentication .*/PasswordAuthentication no/' "$SSHD_CONFIG_FILE" [1, 2, 5, 9]
$SUDO_CMD sed -i 's/^#*PermitRootLogin .*/PermitRootLogin prohibit-password/' "$SSHD_CONFIG_FILE" [1, 2, 5, 9]
log_success "SSH配置文件修改成功，已设置为禁止密码登录。"

# 6. 重启SSH服务
log_info "正在尝试重启SSH服务..."
RESTARTED=0
if command -v systemctl >/dev/null 2>&1; then
    if $SUDO_CMD systemctl restart sshd >/dev/null 2>&1; then
        log_success "SSH服务重启成功 (使用 systemctl restart sshd)。"
        RESTARTED=1
    elif $SUDO_CMD systemctl restart ssh >/dev/null 2>&1; then
        log_success "SSH服务重启成功 (使用 systemctl restart ssh)。"
        RESTARTED=1
    fi
fi

if [ "$RESTARTED" -eq 0 ] && command -v service >/dev/null 2>&1; then
    if $SUDO_CMD service sshd restart >/dev/null 2>&1; then
        log_success "SSH服务重启成功 (使用 service sshd restart)。"
        RESTARTED=1
    elif $SUDO_CMD service ssh restart >/dev/null 2>&1; then
        log_success "SSH服务重启成功 (使用 service ssh restart)。"
        RESTARTED=1
    fi
fi

if [ "$RESTARTED" -eq 0 ]; then
    log_error "自动重启SSH服务失败！请手动重启。"
else
    log_success "所有操作已成功完成！"
fi

echo ""
log_warning "重要提示：请务必拥有公钥对应的私钥，否则将无法再次登录！"
