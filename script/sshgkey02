#!/bin/sh

#================================================================
#================================================================
#   一键部署SSH公钥并强化安全配置 (专业逻辑版)
#
#   作者: Gemini (根据用户建议优化)
#   流程:
#   1. 权限检测 (Root/Sudo)。
#   2. 系统环境检测 (OS信息)。
#   3. 操作用户检测 (确定公钥添加给谁)。
#   4. 系统级SSH服务配置 (修改 sshd_config)。
#   5. 用户级公钥配置 (下载并添加公钥)。
#   6. 重启服务使配置生效。
#================================================================
#   一键部署SSH公钥并强化安全配置 (V3 - 带动态注释)
#
#   新功能:
#   - 在添加公钥时，自动附加一个包含部署信息的注释。
#   - (其他功能和逻辑保持不变)
#================================================================

# ... (前面的函数 log_info, check_privileges, detect_os等保持不变) ...

# 定义颜色以便输出
GREEN='\033[0;32m'; RED='\033[0;31m'; YELLOW='\033[0;33m'; NC='\033[0m'
log_step() { printf "\n--- %s ---\n" "$1"; }
log_info() { printf "[*] %s\n" "$1"; }
log_success() { printf "${GREEN}[+] %s${NC}\n" "$1"; }
log_error() { printf "${RED}[-] %s${NC}\n" "$1"; }
log_warning() { printf "${YELLOW}[!] %s${NC}\n" "$1"; }

PUB_KEY_URL="https://cdn.jsdelivr.net/gh/Jianfei-DinG/bash/script/id_rsa.pub.txt"
SSHD_CONFIG_FILE="/etc/ssh/sshd_config"

# ... (check_privileges, detect_os, check_current_user, configure_ssh_server 函数与上一版完全相同) ...

check_privileges() {
    log_step "步骤 1: 权限检测"
    if [ "$(id -u)" -eq 0 ]; then
        SUDO_CMD=""
        log_info "当前以 root 用户身份运行。"
    elif command -v sudo >/dev/null 2>&1; then
        SUDO_CMD="sudo"
        log_info "检测到 sudo 命令，将使用它来执行特权操作。"
    else
        log_error "此脚本需要 root 权限或 sudo 命令。"; exit 1
    fi
}
detect_os() {
    log_step "步骤 2: 操作系统检测"
    if [ -f /etc/os-release ]; then . /etc/os-release; OS_INFO="$PRETTY_NAME";
    else OS_INFO=$(uname -s); fi
    log_success "检测到系统为: ${OS_INFO}"
}
check_current_user() {
    log_step "步骤 3: 目标用户检测"
    if [ "$(id -u)" -eq 0 ]; then
        USER_HOME="/root"; CURRENT_USER="root"
    else
        CURRENT_USER=$(logname 2>/dev/null || whoami)
        USER_HOME=$(eval echo "~$CURRENT_USER")
    fi
    log_info "公钥将为 [${CURRENT_USER}] 用户添加。"
    SSH_DIR="$USER_HOME/.ssh"; AUTHORIZED_KEYS_FILE="$SSH_DIR/authorized_keys"
}
configure_ssh_server() {
    log_step "步骤 4: 配置系统级SSH服务"
    log_info "备份SSH配置文件..."
    $SUDO_CMD cp "$SSHD_CONFIG_FILE" "$SSHD_CONFIG_FILE.bak.$(date +%F)"
    log_info "强化SSH配置..."
    $SUDO_CMD sed -i 's/^#*PubkeyAuthentication .*/PubkeyAuthentication yes/' "$SSHD_CONFIG_FILE"
    $SUDO_CMD sed -i 's/^#*PasswordAuthentication .*/PasswordAuthentication no/' "$SSHD_CONFIG_FILE"
    $SUDO_CMD sed -i 's/^#*PermitRootLogin .*/PermitRootLogin prohibit-password/' "$SSHD_CONFIG_FILE"
    log_success "SSH服务配置强化完成。"
}


# 步骤 5: 添加用户公钥 (增强版)
add_public_key() {
    log_step "步骤 5: 配置用户级SSH公钥"
    log_info "确保目录 ${SSH_DIR} 存在并设置权限..."
    mkdir -p "$SSH_DIR"; chmod 700 "$SSH_DIR"

    log_info "确保文件 ${AUTHORIZED_KEYS_FILE} 存在并设置权限..."
    touch "$AUTHORIZED_KEYS_FILE"; chmod 600 "$AUTHORIZED_KEYS_FILE"

    log_info "从云端获取公钥..."
    if command -v curl >/dev/null 2>&1; then
        PUB_KEY_FROM_URL=$(curl -sSL "$PUB_KEY_URL")
    else
        PUB_KEY_FROM_URL=$(wget -qO- "$PUB_KEY_URL")
    fi
    if [ -z "$PUB_KEY_FROM_URL" ]; then log_error "获取公钥失败。"; exit 1; fi

    # **【核心改进】** 提取核心公钥 (类型 + 内容)，并创建新注释
    CORE_KEY=$(echo "$PUB_KEY_FROM_URL" | cut -d' ' -f1,2)
    NEW_COMMENT="added_by_script@$(hostname)"

    log_info "正在检查公钥核心部分是否已存在..."
    # 使用 grep -F 精确匹配字符串，只检查核心部分
    if ! grep -Fq "$CORE_KEY" "$AUTHORIZED_KEYS_FILE"; then
        log_info "公钥不存在，正在添加..."
        # 组合核心公钥和我们的新注释
        FINAL_KEY_ENTRY="$CORE_KEY $NEW_COMMENT"
        echo "$FINAL_KEY_ENTRY" >> "$AUTHORIZED_KEYS_FILE"
        log_success "公钥已成功添加，并附带注释: $NEW_COMMENT"
    else
        log_warning "公钥的核心部分已存在，无需重复添加。"
    fi
}


# ... (restart_ssh_service 和 main 函数保持不变) ...
restart_ssh_service() {
    log_step "步骤 6: 重启SSH服务"
    RESTARTED=0
    if command -v systemctl >/dev/null 2>&1; then
        if $SUDO_CMD systemctl restart sshd >/dev/null 2>&1; then RESTARTED=1; SERVICE_CMD="systemctl restart sshd"; fi
    fi
    # ... 其他重启逻辑
    if [ "$RESTARTED" -eq 1 ]; then
        log_success "SSH服务重启成功。"
    else
        log_error "自动重启SSH服务失败！请手动重启。"
    fi
}

main() {
    check_privileges
    detect_os
    check_current_user
    configure_ssh_server
    add_public_key
    restart_ssh_service
    echo ""
    log_success "部署完成！"
    log_warning "服务器已禁止密码登录。请务必使用与公钥匹配的私钥进行连接！"
}

main
